/**
 * vzlogger configuration
 *
 * use proper encoded JSON with javascript comments
 *
 * take a look at the wiki for detailed information:
 * http://wiki.volkszaehler.org/software/controller/vzlogger#configuration
*/

{
    "retry": 30,            // how long to sleep between failed requests, in seconds
    "daemon": false,        // run periodically
    "verbosity": 5,         // one of 0 = log_error and log_warning, 5 = log_info, 10 = log_debug, 15 = log_finest
    "log": "/var/log/vzlogger.log",     // path to logfile, optional

    "local": {
        "enabled": false,   // should we start the local HTTPd for serving live readings?
        "port": 8080,       // the TCP port for the local HTTPd
        "index": true,      // should we provide a index listing of available channels if no UUID was requested?
        "timeout": 30,      // timeout for long polling comet requests, 0 disables comet, in seconds
        "buffer": -1       // how long to buffer readings for the local interface, in seconds (if greater 0) or how many tuples to return per channel if <0 (-3 = return 3 tuples), default -1
    },

    "meters": [
        {
            "enabled": false,               // disabled meters will be ignored (default)
            "skip": false,                  // if enabled, errors when opening meter will lead to meter being ignored
            "protocol": "sml",              // see 'vzlogger -h' for list of available protocols
            "host": "http://localhost/meinzaehler.dyndns.info:7331",
            "channels": [{
                "api": "volkszaehler",      // default middleware api: volkszaehler.org
                "uuid": "fde8f1d0-c5d0-11e0-856e-f9e4360ced10",
                "middleware": "http://localhost/middleware.php",
                "identifier": "power"       // alias for '1-0:1.7.ff', see 'vzlogger -h' for list of available aliases
            }, {
                "uuid": "a8da012a-9eb4-49ed-b7f3-38c95142a90c",
                "middleware": "http://localhost/middleware.php",
                "identifier": "counter",
                "duplicates": 10 // default 0 (send duplicate values), >0 = send duplicate values only each <duplicates> seconds. Activate only for abs. counter values (Zaehlerstaende) and not for impulses!
            }, {
                "uuid": "d5c6db0f-533e-498d-a85a-be972c104b48",
                "middleware": "http://localhost/middleware.php",
                "identifier": "1-0:1.8.0"   // see 'vzlogger -v20' for an output with all available identifiers/OBIS ids
            }]
        },
        {
            "enabled": false,               // disabled meters will be ignored
            "skip": false,                  // if enabled, errors when opening meter will lead to meter being ignored
            "protocol": "s0",
            "aggtime": 300,                 // aggregate all signals and give one update to middleware every 300 seconds
            "aggfixedinterval": true,       // round all timestamps to middleware to nearest aggtime
            "device": "/dev/ttyUSB0",
            "channel": {
                "identifier": "Impulse",    // s0 meter knows "Impulse" and "Power"
                "uuid": "d495a390-f747-11e0-b3ca-f7890e45c7b2",
                "middleware": "http://localhost/middleware.php",
                "aggmode": "SUM"            // add all s0 intervals in the aggregation
            }
        },
        {
            "enabled": false,               // disabled meters will be ignored (default)
            "skip": false,                  // if enabled, errors when opening meter will lead to meter being ignored
            "protocol": "d0",               // see 'vzlogger -h' for list of available protocols
            "device": "/dev/ttyUSB0",
            "dump_file": "/var/log/dumpD0.txt", // optional, if set logs all received/transmitted data to this file
//          "read_timeout": 10, // optional, default 10s. Timeout value in secs between single bytes received from device
//          "baudrate_change_delay": 400, // optional, default none. Delay value in ms after ACKSEQ send before baudrate change
            "parity": "7E1",                // oder 8N1
            "baudrate": 9600,               // oder 300
//          "pullseq": "2F3F210D0A",        // Pullsequenz in 'hex'
//          "ackseq": "063030300d0a",       // optional (default: keine Antwortsequenz auf Zaehlerantwort) kann entweder feste hex-Sequenz sein (z.B. 063035300d0a für mode C mit 9600bd oder 063030300d0a = 300bd) oder kann auf "auto" gesetzt werden, damit die Sequenz autom. berechnet wird und autom. auf die max. Baudrate umgeschaltet wird (baudrate_read wird dann ignoriert)
//          "baudrate_read": 300,           // Baudratenumschaltung auf gewünschte Baudrate, abhängig von Zählerantwort
//          "aggtime": 20,                  // in Sekunden
//          "aggmode": "AVG",               // Mittelwert für Leistung, "MAX" für Zähler, "SUM" für Counter
            "interval": 6,                  // Wartezeit in Sekunden bis neue Werte in die middleware übertragen werden
            "channel": {                    // Beispiel-channel
                "uuid": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeee",
                "middleware": "http://127.0.0.1/middleware.php",
                "identifier": "1-0:1.8.1"   // alias for '1-0:1.8.1', see 'vzlogger -h' for list of available aliases
            }
        },

        // examples for non-device protocols
        {
            "enabled": false,               // disabled meters will be ignored
            "skip": false,                  // if enabled, errors when opening meter will lead to meter being ignored
            "protocol": "random",
            "interval": 2,
            "max": 40.0,                    // has to be double!
            "min": -5.0,                    // has to be double!
            "channel": {
                "uuid": "bac2e840-f72c-11e0-bedf-3f850c1e5a66",
                "middleware": "http://localhost/middleware.php"
            }
        },
        {
            "enabled": false,               // disabled meters will be ignored
            "skip": false,                  // if enabled, errors when opening meter will lead to meter being ignored
            "protocol": "file",
            "path": "/proc/loadavg",
//          "format": "$i $v $t",           // a format string for parsing complex logfiles
                                            // arbitrary text and whitespaces are allowed, see 'scanf()'
                                            // at least $v has to be used
                                            // $i => identifier, $v => value, $t => timestamp
            "rewind": true,                 // reset file pointer each interval to the beginning of the file
            "interval": 2                   // of ommitted, we will try to listen on changes with inotify
        },

        // examples for Flukso-based sensors
        {
            "enabled": false,               // disabled meters will be ignored
            "skip": false,                  // if enabled, errors when opening meter will lead to meter being ignored
            "protocol": "fluksov2",
            "fifo": "/var/spid/delta/out",
            "channel": {
                "uuid": "3b4da450-42a8-11e1-8b8d-c526d853edec",
                "middleware": "http://localhost/middleware.php",
                "identifier": "sensor0/power" // or "sensor2/consumption" e.g.
            }
        },

		// example for OCR (image processing/recognizing) "meter"
		{
			"enabled" : false,
			"skip": true,
			"protocol": "ocr",
			"impulses": 10000, // (optional, default 0 = no impules but abs. values), >0 impulses per unit
			"file": "/tmp/image.png", // name of file to be processed
			"generate_debug_image": false, // (optional, default false) set true to help in calibrating and debugging. generates one png named <file>_debug.png
			"rotate": -2.0, // (optional, default 0.0) angle in deg for rotation. pos = clockwise, neg = counterclockwise
			"autofix" : {"range": 20, "x":42, "y":43}, // (optional default none) "auto fix"/move the pic based on some edge located at (x, y) within +/-"range" pixs
			"recognizer": [
//				{ "type": "tesseract", // (optional default tesseract).
//					"gamma": 1.0, // (optional default 1.0) gamma correction to be applied to the image
//					"gamma_min": 50, // (optional default 50) gamma TRC min value (see leptonica pixGammaTRC)
//					"gamma_max": 120, // (optional default 120) gamma TRC max value
//					"boundingboxes": [{ // list of bounding boxes for detection, at least one must be defined
//						"identifier": "1-0:1.8.1", // this reading will be given the Obis-like id (can actually be any string). Multiple boxes can contribute to the same id. E.g. when using scaler one box can be for a single digit
//						"confidence_id": "1-0:0.0.1", // (optional default none) name for identifier returning the min. confidence (0-100 (best)) per processed image. If multiple boundingboxes with same identifier are used this can just be set once (i.e. is assigned to the identifier)!
//						"scaler" : 0, // (optional, default 0) 10^scaler, e.g. 0 = *1, -1 = *0,1, -2 = *0,01, 2 = *100
//						"digit" : false, // (optional default false) a single digit is expected (thus the recognized value can only be within -9..9)
//						"box" : { "x1": -1, "y1": -1, "x2": -1, "y2": -1 }, // (optional default full image) coordinates for this box as {x1=left, y1=top, x2=right (excl), y2=bottom (excl)}
//				}]
//				},
				{ "type": "needle",
				"kernelColorString": "2 -2 -2 0 0 0 0 0 0", // (optional default red channel only) Color conversion 3x3 matrix to be applied before detecting (first line channel red). Needles need to be color red.
				"boundingboxes": [{
					"identifier": "1-0:1.8.1",
					"confidence_id": "1-0:0.0.2",
					"scaler": -1,
					"digit": true,
					"circle": {"cx": 100, "cy": 100, // center pos (x/y) of needle
						"cr": 50, // radius where to scan for the needle
						"offset": 0.0 // optional (default 0) offset of this needle. E.g. if at 5.0 (2nd digit needle at zero) but this needle show ~4.6 enter offset 0.4.
					}
					}]
				}
			],
			"channel": {                    // example channel. multiple channels supported as well
                "uuid": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeee",
                "middleware": "http://127.0.0.1/middleware.php",
                "identifier": "1-0:1.8.1"   // alias for '1-0:1.8.1', see 'vzlogger -h' for list of available aliases
            }

		},

        // examples for MySmartGrid as middleware
        {
            "enabled": false,               // disabled meters will be ignored
            "skip": false,                  // if enabled, errors when opening meter will lead to meter being ignored
            "protocol": "d0",               // see 'vzlogger -h' for list of available protocols
            "device": "/dev/ttyUSB2",
            "interval": 2,
            "resolution": 2000,
            "channels": [{
                "api": "mysmartgrid",       // use MySmartgrid as middleware api
                "type": "sensor",
                "uuid": "01234567-9abc-def0-1234-56789abcdefe",
                "secretKey": "0123456789abcdef0123456789abcdef",
                "interval": 300,
                "middleware": "https://api.mysmartgrid.de:8443",    // identifier for measurement: 1-0:1.8.0
                "identifier": "1-0:1.8.0",  // see 'vzlogger -v20' for an output with all available identifiers/OBIS ids
                "scaler": 1000              // d0 counter is in kWh, so scaling is 1000
            }]
        },
        {
            "enabled": false,               // disabled meters will be ignored
            "skip": false,                  // if enabled, errors when opening meter will lead to meter being ignored
            "protocol": "sml",              // see 'vzlogger -h' for list of available protocols
            "device": "/dev/ttyUSB0",
            "interval": 2,
            "resolution": 2000,
            "channels": [{
                "api": "mysmartgrid",       // use MySmartgrid as middleware api
                "type": "sensor",
                "uuid": "01234567-9abc-def0-1234-56789abcdefe",
                "secretKey": "0123456789abcdef0123456789abcdef",
                "interval": 300,
                "middleware": "https://api.mysmartgrid.de:8443",    // identifier for measurement: 1-0:1.8.0
                "identifier": "1-0:1.8.0",  // see 'vzlogger -v20' for an output with all available identifiers/OBIS ids
                "scaler": 1                 // sml counter is in Wh, so scaling is 1
            }]
        },
        {
            "enabled": false,               // disabled meters will be ignored
            "skip": false,                  // if enabled, errors when opening meter will lead to meter being ignored
            "protocol": "s0",               // see 'vzlogger -h' for list of available protocols
            "device": "/dev/ttyUSB1",
            "interval": 2,
            "resolution": 2000,
            "channels": [{
                "api": "mysmartgrid",       // use MySmartgrid as middleware api
                "type": "sensor",
                "uuid": "01234567-9abc-def0-1234-56789abcdefe",
                "secretKey": "0123456789abcdef0123456789abcdef",
                "interval": 300,
                "middleware": "https://api.mysmartgrid.de:8443",    // identifier for measurement: 1-0:1.8.0
                "identifier": "counter",
                "scaler": "1-0"               // s0 counter is in Wh
            }]
        }
    ]
}
